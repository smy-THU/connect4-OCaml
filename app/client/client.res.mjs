// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.res.mjs";

console.log("Hello, world!");

var host = window.location.host;

var socket = new WebSocket("ws://" + host + "/websocket");

function initializeGameState(rows, cols) {
  return Core__Array.make(rows, Core__Array.make(cols, "empty"));
}

var isPlayerTurn = {
  contents: true
};

var enableNewGame = {
  contents: true
};

var boardRows = {
  contents: 6
};

var boardCols = {
  contents: 3
};

function handleCellClick(row, col) {
  if (isPlayerTurn.contents) {
    var s_row = String(row);
    var s_col = String(col);
    isPlayerTurn.contents = false;
    socket.send(s_row + "," + s_col);
    return ;
  }
  window.alert("It's not your turn");
}

function createCell(row, col) {
  var cell = document.createElement("div");
  cell.className = "cell";
  var s_row = String(row);
  var s_col = String(col);
  cell.setAttribute("id", "cell-r" + s_row + "-c" + s_col);
  cell.addEventListener("click", (function (param) {
          handleCellClick(row, col);
        }));
  return Belt_Option.getExn(Webapi__Dom__Element.asHtmlElement(cell));
}

function renderBoard() {
  var rows = boardRows.contents;
  var cols = boardCols.contents;
  var s_rows = String(rows);
  var s_cols = String(cols);
  var board = Belt_Option.getExn(Caml_option.nullable_to_opt(document.getElementById("board")));
  var board_style = Belt_Option.getExn(Webapi__Dom__Element.asHtmlElement(board)).style;
  board_style.setProperty("grid-template-columns", "repeat(" + s_cols + ", 50px)", "");
  board_style.setProperty("grid-template-rows", "repeat(" + s_rows + ", 50px)", "");
  for(var i = 0 ,i_finish = Math.imul(rows, cols); i < i_finish; ++i){
    var cell = createCell(Caml_int32.div(i, cols), Caml_int32.mod_(i, cols));
    board.appendChild(cell);
  }
}

renderBoard();

function updateBoard(s_row, s_col, value) {
  var cell_id = "cell-r" + s_row + "-c" + s_col;
  Belt_Option.getExn(Caml_option.nullable_to_opt(document.getElementById(cell_id))).textContent = value;
}

socket.addEventListener("open", (function (param) {
        console.log("Connected.");
      }));

socket.addEventListener("message", (function ($$event) {
        var data = JSON.stringify($$event.data).slice(1, -1).split(",");
        var match = Belt_Option.getExn(data[0]);
        switch (match) {
          case "agent_action" :
              var s_row = Belt_Option.getExn(data[1]);
              var s_col = Belt_Option.getExn(data[2]);
              updateBoard(s_row, s_col, "O");
              isPlayerTurn.contents = true;
              return ;
          case "game_end" :
              var winner = Belt_Option.getExn(data[1]);
              window.alert("Game over! Winner: " + winner + ". You can start a new game now!");
              enableNewGame.contents = true;
              return ;
          case "invalid_action" :
              window.alert("You can't place here");
              return ;
          case "player_action" :
              var s_row$1 = Belt_Option.getExn(data[1]);
              var s_col$1 = Belt_Option.getExn(data[2]);
              return updateBoard(s_row$1, s_col$1, "X");
          default:
            console.log("???");
            return ;
        }
      }));

socket.addEventListener("close", (function (param) {
        console.log("Disconnected.");
      }));

export {
  host ,
  socket ,
  initializeGameState ,
  isPlayerTurn ,
  enableNewGame ,
  boardRows ,
  boardCols ,
  handleCellClick ,
  createCell ,
  renderBoard ,
  updateBoard ,
}
/*  Not a pure module */
